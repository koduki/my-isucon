package spay.utils.db;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import org.postgresql.jdbc.PgStatement;

public class PgProxyStatement implements java.sql.Statement {
    private PgStatement proxy;

    public PgProxyStatement(PgStatement proxy) {
        this.proxy = proxy;
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        System.out.println("execute sql: " + sql);
        return proxy.execute(sql);
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        System.out.println("execute sql: " + sql);
        return proxy.executeQuery(sql);
    }

    @Override
    public void close() throws SQLException {
        System.out.println(this.getClass().getSimpleName() + " close");
        proxy.close();
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        System.out.println("execute sql: " + sql);
        return proxy.executeUpdate(sql);
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return proxy.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        proxy.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        return proxy.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        proxy.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        proxy.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return proxy.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        proxy.setQueryTimeout(seconds);
    }

    @Override
    public void cancel() throws SQLException {
        proxy.cancel();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return proxy.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        proxy.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        proxy.setCursorName(name);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return proxy.getResultSet();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return proxy.getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return proxy.getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        proxy.setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return proxy.getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        proxy.setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException {
        return proxy.getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return proxy.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return proxy.getResultSetType();
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        proxy.addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        proxy.clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return proxy.executeBatch();
    }

    @Override
    public Connection getConnection() throws SQLException {
        return proxy.getConnection();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return proxy.getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return proxy.getGeneratedKeys();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return proxy.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return proxy.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return proxy.executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return proxy.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return proxy.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return proxy.execute(sql, columnNames);
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return proxy.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return proxy.isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        proxy.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return proxy.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        proxy.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return proxy.isCloseOnCompletion();
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return proxy.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return proxy.isWrapperFor(iface);
    }
}